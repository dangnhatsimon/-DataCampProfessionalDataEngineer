The shell stores information in variables. Some of these, called environment variables, are available all the time. Environment variables' names are conventionally written in upper case, and a few of the more commonly-used ones are shown below.
HOME	User's home directory	/hsetome/repl
PWD	Present working directory	Same as pwd command
SHELL	Which shell program is being used	/bin/bash
USER	User's ID	repl
To get a complete list (which is quite long), you can type "set" in the shell.

A simpler way to find a variable's value is to use a command called echo, which prints its arguments. Typing
"echo hello DataCamp!"
prints
"hello DataCamp!"
If you try to use it to print a variable's value like this:
"echo USER"
it will print the variable's name, "USER".
To get the variable's value, you must put a dollar sign $ in front of it. Typing
"echo $USER"
prints
"repl"
This is true everywhere: to get the value of a variable called X, you must write $X. (This is so that the shell can tell whether you mean "a file named X" or "the value of a variable named X".)

The other kind of variable is called a shell variable, which is like a local variable in a programming language.
To create a shell variable, you simply assign a value to a name:
"training=seasonal/summer.csv"

Shell variables are also used in loops, which repeat commands many times. If we run this command:
"for filetype in gif jpg png; do echo $filetype; done"
The structure is for …variable… in …list… ; do …body… ; done
The list of things the loop is to process (in our case, the words gif, jpg, and png).
The variable that keeps track of which thing the loop is currently processing (in our case, filetype).
The body of the loop that does the processing (in our case, echo $filetype).
Notice that the body uses $filetype to get the variable's value instead of just filetype, just like it does with any other shell variable.
Also notice where the semi-colons go: the first one comes between the list and the keyword do, and the second comes between the body and the keyword done.

You can always type in the names of the files you want to process when writing the loop, but it's usually better to use wildcards. Try running this loop in the console:
"for filename in seasonal/*.csv; do echo $filename; done"

People often set a variable using a wildcard expression to record a list of filenames. For example, if you define datasets like this:
"datasets=seasonal/*.csv"
you can display the files' names later using:
"for filename in $datasets; do echo $filename; done"

Printing filenames is useful for debugging, but the real purpose of loops is to do things with multiple files. This loop prints the second line of each data file:
"for file in seasonal/*.csv; do head -n 2 $file | tail -n 1; done"

It's easy and sensible to give files multi-word names like July 2017.csv when you are using a graphical file explorer. However, this causes problems when you are working in the shell. For example, suppose you wanted to rename July 2017.csv to be 2017 July data.csv. You cannot type:
"mv July 2017.csv 2017 July data.csv"
because it looks to the shell as though you are trying to move four files called July, 2017.csv, 2017, and July (again) into a directory called data.csv. Instead, you have to quote the files' names so that the shell treats each one as a single parameter:
"mv 'July 2017.csv' '2017 July data.csv'"

