"cat", which just prints the contents of files onto the screen. 
(Its name is short for "concatenate", meaning "to link things together", since it will print all the files whose names you give it, one after the other.)
"cat agarwal.txt"

You can use "cat" to print large files and then scroll through the output, but it is usually more convenient to page the output.
The original command for doing this was called "more", but it has been superseded by a more powerful command called "less".
When you "less" a file, one page is displayed at a time; you can press spacebar to page down or type "q" to quit.
If you give less the names of several files, you can type ":n" (colon and a lower-case 'n') to move to the next file, ":p" to go back to the previous one, or ":q" to quit.

"head" - as its name suggests, it prints the first few lines of a file (where "a few" means 10), so the command:
"head seasonal/summer.csv"

You won't always want to look at the first 10 lines of a file, so the shell lets you change head's behavior by giving it a command-line flag (or just "flag" for short). If you run the command:
"head -n 3 seasonal/summer.csv"
"head" will only display the first three lines of the file. If you run "head -n 100", it will display the first 100 (assuming there are that many), and so on.
A flag's name usually indicates its purpose (for example, -n is meant to signal "number of lines"). 
Command flags don't have to be a "-" followed by a single letter, but it's a widely-used convention.

If you want to select columns, you can use the command "cut".
"cut -f 2-5,8 -d , values.csv"
which means "select columns 2 through 5 and columns 8, using comma as the separator". 
"cut" uses "-f" (meaning "fields") to specify columns and "-d" (meaning "delimiter") to specify the separator. 

"cut" is a simple-minded command. In particular, it doesn't understand quoted strings.

"head" and "tail" select rows, "cut" selects columns, and "grep" selects lines according to what they contain.
"grep" takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text. 
For example, "grep bicuspid seasonal/winter.csv" prints lines from "winter.csv" that contain "bicuspid".
"grep"'s more common flags:
"-c": print a count of matching lines rather than the lines themselves
"-h": do not print the names of files when searching multiple files
"-i": ignore case (e.g., treat "Regression" and "regression" as matches)
"-l": print the names of files that contain matches, not the matches
"-n": print line numbers for matching lines
"-v": invert the match, i.e., only show lines that don't match


To find out what commands do, people used to use the "man" command (short for "manual").
For example, the command "man head" brings up this information.
"man" automatically invokes "less", so you may need to press spacebar to page through the information and ":q" to quit.
The one-line description under "NAME" tells you briefly what the command does, and the summary under "SYNOPSIS" lists all the flags it understands. 
Anything that is optional is shown in square brackets [...], either/or alternatives are separated by "|", and things that can be repeated are shown by "...", 
so "head"'s manual page is telling you that you can either give a line count with "-n" or a byte count with "-c", and that you can give it any number of filenames.

One of the shell's power tools is tab completion. 
If you start typing the name of a file and then press the "tab" key, the shell will do its best to auto-complete the path. 
For example, if you type sea and press "tab", it will fill in the directory name "seasonal/" (with a trailing slash). 
If you then type a and "tab", it will complete the path as "seasonal/autumn.csv".

If the path is ambiguous, such as "seasonal/s", pressing tab a second time will display a list of possibilities. 
Typing another character or two to make your path more specific and then pressing "tab" will fill in the rest of the name.


One of the biggest advantages of using the shell is that it makes it easy for you to do things over again. 
If you run some commands, you can then press the up-arrow key to cycle back through them. You can also use the left and right arrow keys and the delete key to edit them. 
Pressing return will then run the modified command.
"history" will print a list of commands you have run recently.
Each one is preceded by a serial number to make it easy to re-run particular commands: just type "!55" to re-run the 55th command in your history.
You can also re-run a command by typing an exclamation mark followed by the command's name, such as "!head" or "!cut", which will re-run the most recent use of that command.

