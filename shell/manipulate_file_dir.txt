"pwd" tells you where you are.
To find out what's there, type "ls" (which is short for "listing") and press the enter key.
On its own, "ls" lists the contents of your current directory (the one displayed by pwd).
If you add the names of some files, "ls" will list them, and if you add the names of directories, it will list their contents.
For example, "ls /home/repl" shows you what's in your starting directory (usually called your home directory).

If you are in the directory "/home/repl", the relative path seasonal specifies the same directory as the absolute path "/home/repl/seasonal".
If you are in the directory "/home/repl/seasonal", the relative path winter.csv specifies the same file as the absolute path "/home/repl/seasonal/winter.csv".
The shell decides if a path is absolute or relative by looking at its first character: If it begins with "/", it is absolute. If it does not begin with "/", it is relative.

In order to see everything underneath a directory, no matter how deeply nested it is, you can give "ls" the flag "-R" (which means "recursive").
If you use "ls -R" in your home directory, you will see something like this: This shows every file and directory in the current level, then everything in each sub-directory, and so on.
ls has another flag "-F" that prints a "/" after the name of every directory and a "*" after the name of every runnable program.

move around in the filesystem using the command cd (which stands for "change directory").
If you type "cd seasonal" and then type "pwd", the shell will tell you that you are now in /home/repl/seasonal. If you then run ls on its own, it shows you the contents of "/home/repl/seasonal", because that's where you are.
If you want to get back to your home directory "/home/repl", you can use the command cd "/home/repl".

The parent of a directory is the directory above it. For example, "/home" is the parent of "/home/repl", and "/home/repl" is the parent of "/home/repl/seasonal". 
You can always give the absolute path of your parent directory to commands like cd and ls. 
More often, though, you will take advantage of the fact that the special path ".." (two dots with no spaces) means "the directory above the one I'm currently in". 
If you are in /home/repl/seasonal, then "cd .." moves you up to /home/repl. 
If you use "cd .." once again, it puts you in "/home". One more "cd .." puts you in the root directory "/", which is the very top of the filesystem. (Remember to put a space between cd and .. - it is a command and a path, not a single four-letter command.)

A single dot on its own, ".", always means "the current directory", so ls on its own and "ls ." do the same thing, while cd . has no effect (because it moves you into the directory you're currently in).

One final special path is "~" (the tilde character), which means "your home directory", such as "/home/repl". No matter where you are, "ls ~" will always list the contents of your home directory, and cd ~ will always take you home.

"mv" moves it from one directory to another, just as if you had dragged it in a graphical file browser. It handles its parameters the same way as "cp", so the command:
"mv autumn.csv winter.csv .."
moves the files autumn.csv and winter.csv from the current working directory up one level to its parent directory (because ".." always refers to the directory above your current location).

You will often want to copy files, move them into other directories to organize them, or rename them. One command to do this is cp, which is short for "copy". If original.txt is an existing file, then:
"cp original.txt duplicate.txt"
creates a copy of original.txt called duplicate.txt. If there already was a file called duplicate.txt, it is overwritten. 

If the last parameter to cp is an existing directory, then a command like:
"cp seasonal/autumn.csv seasonal/winter.csv backup"
copies all of the files into that directory.


"mv" can also be used to rename files. If you run:
"mv course.txt old-course.txt"
then the file course.txt in the current working directory is "moved" to the file old-course.txt. This is different from the way file browsers work, but is often handy.

One warning: just like "cp", "mv" will overwrite existing files. 
If, for example, you already have a file called old-course.txt, then the command shown above will replace it with whatever is in course.txt.


We can copy files and move them around; to delete them, we use "rm", which stands for "remove". As with "cp" and "mv", you can give rm the names of as many files as you'd like, so:
"rm thesis.txt backup/thesis-2017-08.txt"
removes both thesis.txt and backup/thesis-2017-08.txt

"rm" does exactly what its name says, and it does it right away: unlike graphical file browsers, the shell doesn't have a trash can, so when you type the command above, your thesis is gone for good.

"mv" treats directories the same way it treats files: if you are in your home directory and run "mv seasonal by-season", for example, "mv" changes the name of the seasonal directory to by-season. 
However, "rm" works differently.

If you try to "rm" a directory, the shell prints an error message telling you it can't do that, primarily to stop you from accidentally deleting an entire directory full of work.
Instead, you can use a separate command called rmdir.
For added safety, it only works when the directory is empty, so you must delete the files in a directory before you delete the directory.
